#!/usr/bin/env python3
import math

#build = '~/src/backgammon/build.clang++-13'
build = '.'
train = f'{build}/train'

games_per_round = 1_000_000

def file_for(basename, number):
    return f'{basename}-{number}.w'

def batch_schedule(a_start, rounds, frm=0, lambda_=0.85, basename='white', opponent=None, batchsize=None, momentum=0):

    games = games_per_round * rounds

    print("")
    print("# alpha:", a_start)
    print("# lambda:", lambda_)
    print("# games per round:", games_per_round)
    print("# rounds:", rounds)

    if opponent:
        print("# opponent: ", opponent)
    else:
        print("# opponent:", "self")

    if momentum:
        print('# momentum:', momentum)

    if batchsize > 1:
        print("batch size:", batchsize)

    print("#")

    every = 1000
    alpha = a_start
    for i in range(frm, frm + rounds):

        fromfile = file_for(basename, i)
        tofile = file_for(basename, i+1)

        cmd  = f'{train} --alpha {alpha} ' \
               f'--lambda {lambda_} ' \
               f'--games {games_per_round} ' \
               f'-d -e {every} ' \
               f'-w {fromfile} -o {tofile}' \
               
        if opponent is not None:
            cmd += f' -b {opponent}'

        if batchsize is not None:
            cmd += f' --batch-size {math.floor(math.sqrt(batchsize))}'
            #cmd += f' --batch-size {math.floor(batchsize}'

        if momentum:
            cmd += f' -p {momentum}'

        print(cmd)
        batchsize = batchsize + 1


def initialize_net(net_type, basename='white'):
    print("# Initialize a new random network.")
    print("#")
    cmd = f"{train} --games 0 -w {net_type} -o {basename}-0.w"
    print(cmd);


batchsize = 1

opponent = None
a_start = 0.001
rounds = 400
lmbda = 0.85
momentum = 0.0
from_game = 0

bname = 'h30-bsqr400'
neural = 'netv3tr'

initialize_net(neural, basename=bname);
batch_schedule(a_start, rounds, basename=bname, lambda_=lmbda, frm=from_game, opponent=opponent, batchsize=batchsize, momentum=momentum)

